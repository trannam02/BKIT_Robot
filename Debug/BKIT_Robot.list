
BKIT_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026a8  080026a8  000036a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026cc  080026cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080026cc  080026cc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026cc  080026cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026d0  080026d0  000036d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080026d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080026e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080026e0  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007857  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178f  00000000  00000000  0000b88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0000d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000751  00000000  00000000  0000d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b09  00000000  00000000  0000e101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0f0  00000000  00000000  00026c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092577  00000000  00000000  00031cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000c42b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c69ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002690 	.word	0x08002690

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002690 	.word	0x08002690

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000276:	2afd      	cmp	r2, #253	@ 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	@ 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	@ 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <beep>:
 *  - freq: Frequency of the sound in Hz (controls the pitch)
 *  - duration_ms: Duration of the sound in milliseconds
 *  - duty_cycle: PWM duty cycle (0–100%), used to control the volume
 */

void beep(uint32_t freq, uint32_t duration_ms, float duty_cycle) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	if (freq == 0) {
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d107      	bne.n	800060a <beep+0x22>
		// rest
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80005fa:	2100      	movs	r1, #0
 80005fc:	481f      	ldr	r0, [pc, #124]	@ (800067c <beep+0x94>)
 80005fe:	f001 fac9 	bl	8001b94 <HAL_TIM_PWM_Stop>
		HAL_Delay(duration_ms);
 8000602:	68b8      	ldr	r0, [r7, #8]
 8000604:	f000 faea 	bl	8000bdc <HAL_Delay>
		return;
 8000608:	e035      	b.n	8000676 <beep+0x8e>
	}

    uint32_t timer_clock = 64000000; // Timer clock 64 MHz
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <beep+0x98>)
 800060c:	61fb      	str	r3, [r7, #28]
    uint32_t arr = 100;
 800060e:	2364      	movs	r3, #100	@ 0x64
 8000610:	61bb      	str	r3, [r7, #24]
    uint32_t psc = (timer_clock / ((arr + 1) * freq)) - 1;
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	3301      	adds	r3, #1
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	69fa      	ldr	r2, [r7, #28]
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	3b01      	subs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
    uint32_t ccr = duty_cycle * arr;
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f7ff ff66 	bl	80004f8 <__aeabi_ui2f>
 800062c:	4603      	mov	r3, r0
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdf7 	bl	8000224 <__aeabi_fmul>
 8000636:	4603      	mov	r3, r0
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffb5 	bl	80005a8 <__aeabi_f2uiz>
 800063e:	4603      	mov	r3, r0
 8000640:	613b      	str	r3, [r7, #16]

    __HAL_TIM_SET_PRESCALER(&htim2, psc);
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <beep+0x94>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <beep+0x94>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <beep+0x94>)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr);
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <beep+0x94>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	635a      	str	r2, [r3, #52]	@ 0x34

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <beep+0x94>)
 8000664:	f001 f9dc 	bl	8001a20 <HAL_TIM_PWM_Start>
    HAL_Delay(duration_ms);
 8000668:	68b8      	ldr	r0, [r7, #8]
 800066a:	f000 fab7 	bl	8000bdc <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800066e:	2100      	movs	r1, #0
 8000670:	4802      	ldr	r0, [pc, #8]	@ (800067c <beep+0x94>)
 8000672:	f001 fa8f 	bl	8001b94 <HAL_TIM_PWM_Stop>
}
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000028 	.word	0x20000028
 8000680:	03d09000 	.word	0x03d09000

08000684 <play_startup_sound>:

void play_startup_sound() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    beep(261, 150, 0.5);  // C4
 8000688:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800068c:	2196      	movs	r1, #150	@ 0x96
 800068e:	f240 1005 	movw	r0, #261	@ 0x105
 8000692:	f7ff ffa9 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000696:	2014      	movs	r0, #20
 8000698:	f000 faa0 	bl	8000bdc <HAL_Delay>
    beep(329, 150, 0.5);  // E4
 800069c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80006a0:	2196      	movs	r1, #150	@ 0x96
 80006a2:	f240 1049 	movw	r0, #329	@ 0x149
 80006a6:	f7ff ff9f 	bl	80005e8 <beep>
    HAL_Delay(20);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f000 fa96 	bl	8000bdc <HAL_Delay>
    beep(392, 200, 0.5);  // G4
 80006b0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80006b4:	21c8      	movs	r1, #200	@ 0xc8
 80006b6:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80006ba:	f7ff ff95 	bl	80005e8 <beep>
    HAL_Delay(20);
 80006be:	2014      	movs	r0, #20
 80006c0:	f000 fa8c 	bl	8000bdc <HAL_Delay>
    beep(523, 300, 0.5);  // C5
 80006c4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80006c8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80006cc:	f240 200b 	movw	r0, #523	@ 0x20b
 80006d0:	f7ff ff8a 	bl	80005e8 <beep>
    HAL_Delay(20);
 80006d4:	2014      	movs	r0, #20
 80006d6:	f000 fa81 	bl	8000bdc <HAL_Delay>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}

080006de <mario_startup_melody>:

void mario_startup_melody() {
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
    beep(659, 150, 0.5);  // E5
 80006e2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80006e6:	2196      	movs	r1, #150	@ 0x96
 80006e8:	f240 2093 	movw	r0, #659	@ 0x293
 80006ec:	f7ff ff7c 	bl	80005e8 <beep>
    HAL_Delay(20);
 80006f0:	2014      	movs	r0, #20
 80006f2:	f000 fa73 	bl	8000bdc <HAL_Delay>
    beep(659, 150, 0.5);  // E5
 80006f6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80006fa:	2196      	movs	r1, #150	@ 0x96
 80006fc:	f240 2093 	movw	r0, #659	@ 0x293
 8000700:	f7ff ff72 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000704:	2014      	movs	r0, #20
 8000706:	f000 fa69 	bl	8000bdc <HAL_Delay>
    beep(0,   150, 0.0);  // rest
 800070a:	f04f 0200 	mov.w	r2, #0
 800070e:	2196      	movs	r1, #150	@ 0x96
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff ff69 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000716:	2014      	movs	r0, #20
 8000718:	f000 fa60 	bl	8000bdc <HAL_Delay>
    beep(659, 150, 0.5);  // E5
 800071c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000720:	2196      	movs	r1, #150	@ 0x96
 8000722:	f240 2093 	movw	r0, #659	@ 0x293
 8000726:	f7ff ff5f 	bl	80005e8 <beep>
    HAL_Delay(20);
 800072a:	2014      	movs	r0, #20
 800072c:	f000 fa56 	bl	8000bdc <HAL_Delay>
    beep(0,   100, 0.0);  // rest
 8000730:	f04f 0200 	mov.w	r2, #0
 8000734:	2164      	movs	r1, #100	@ 0x64
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ff56 	bl	80005e8 <beep>
    HAL_Delay(20);
 800073c:	2014      	movs	r0, #20
 800073e:	f000 fa4d 	bl	8000bdc <HAL_Delay>
    beep(523, 150, 0.5);  // C5
 8000742:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000746:	2196      	movs	r1, #150	@ 0x96
 8000748:	f240 200b 	movw	r0, #523	@ 0x20b
 800074c:	f7ff ff4c 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000750:	2014      	movs	r0, #20
 8000752:	f000 fa43 	bl	8000bdc <HAL_Delay>
    beep(659, 150, 0.5);  // E5
 8000756:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800075a:	2196      	movs	r1, #150	@ 0x96
 800075c:	f240 2093 	movw	r0, #659	@ 0x293
 8000760:	f7ff ff42 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000764:	2014      	movs	r0, #20
 8000766:	f000 fa39 	bl	8000bdc <HAL_Delay>
    beep(784, 250, 0.5);  // G5
 800076a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800076e:	21fa      	movs	r1, #250	@ 0xfa
 8000770:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000774:	f7ff ff38 	bl	80005e8 <beep>
    HAL_Delay(20);
 8000778:	2014      	movs	r0, #20
 800077a:	f000 fa2f 	bl	8000bdc <HAL_Delay>
    beep(0,   250, 0.0);  // rest
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	21fa      	movs	r1, #250	@ 0xfa
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff2f 	bl	80005e8 <beep>
    HAL_Delay(20);
 800078a:	2014      	movs	r0, #20
 800078c:	f000 fa26 	bl	8000bdc <HAL_Delay>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_GPIO_Init+0x28>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <MX_GPIO_Init+0x28>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <MX_GPIO_Init+0x28>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 f9a8 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f812 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff ffe2 	bl	8000794 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007d0:	f000 f8ba 	bl	8000948 <MX_TIM2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // test all api
	  play_startup_sound();
 80007d4:	f7ff ff56 	bl	8000684 <play_startup_sound>
	  HAL_Delay(5000);
 80007d8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007dc:	f000 f9fe 	bl	8000bdc <HAL_Delay>
	  mario_startup_melody();
 80007e0:	f7ff ff7d 	bl	80006de <mario_startup_melody>
	  HAL_Delay(5000);
 80007e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007e8:	f000 f9f8 	bl	8000bdc <HAL_Delay>
	  play_startup_sound();
 80007ec:	bf00      	nop
 80007ee:	e7f1      	b.n	80007d4 <main+0x14>

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b090      	sub	sp, #64	@ 0x40
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2228      	movs	r2, #40	@ 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 ff1a 	bl	8002638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2310      	movs	r3, #16
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000822:	2300      	movs	r3, #0
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000826:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc6f 	bl	8001114 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800083c:	f000 f819 	bl	8000872 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fedc 	bl	8001618 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000866:	f000 f804 	bl	8000872 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3740      	adds	r7, #64	@ 0x40
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
}
 8000878:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	bf00      	nop
 800087c:	e7fd      	b.n	800087a <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <HAL_MspInit+0x5c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_MspInit+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_MspInit+0x5c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x5c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_MspInit+0x60>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_MspInit+0x60>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f936 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 8000982:	f240 227f 	movw	r2, #639	@ 0x27f
 8000986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800098e:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 8000990:	2264      	movs	r2, #100	@ 0x64
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a0:	4823      	ldr	r0, [pc, #140]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 80009a2:	f000 ff95 	bl	80018d0 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009ac:	f7ff ff61 	bl	8000872 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 80009be:	f001 fa1b 	bl	8001df8 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c8:	f7ff ff53 	bl	8000872 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009cc:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 80009ce:	f000 ffce 	bl	800196e <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d8:	f7ff ff4b 	bl	8000872 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 80009ec:	f001 fdb8 	bl	8002560 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009f6:	f7ff ff3c 	bl	8000872 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	@ 0x60
 80009fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 80009fe:	2312      	movs	r3, #18
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 8000a12:	f001 f92f 	bl	8001c74 <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f7ff ff29 	bl	8000872 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_TIM2_Init+0xe8>)
 8000a22:	f000 f823 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 8000a26:	bf00      	nop
 8000a28:	3738      	adds	r7, #56	@ 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000028 	.word	0x20000028

08000a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a44:	d10b      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_TIM_Base_MspInit+0x34>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a8a:	d117      	bne.n	8000abc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_TIM_MspPostInit+0x58>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <HAL_TIM_MspPostInit+0x58>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_TIM_MspPostInit+0x58>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <HAL_TIM_MspPostInit+0x5c>)
 8000ab8:	f000 f998 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ff36 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ad2:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae8:	4c09      	ldr	r4, [pc, #36]	@ (8000b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f001 fda7 	bl	8002648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fe61 	bl	80007c0 <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	080026d4 	.word	0x080026d4
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	20000074 	.word	0x20000074

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f92b 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fea4 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f935 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f90b 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000070 	.word	0x20000070

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	@ (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000070 	.word	0x20000070

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff90 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff49 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff5e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffb0 	bl	8000d40 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b08b      	sub	sp, #44	@ 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	e179      	b.n	80010f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e00:	2201      	movs	r2, #1
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8168 	bne.w	80010ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4a96      	ldr	r2, [pc, #600]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d05e      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a94      	ldr	r2, [pc, #592]	@ (800107c <HAL_GPIO_Init+0x290>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d875      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e2e:	4a94      	ldr	r2, [pc, #592]	@ (8001080 <HAL_GPIO_Init+0x294>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d058      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e34:	4a92      	ldr	r2, [pc, #584]	@ (8001080 <HAL_GPIO_Init+0x294>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d86f      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e3a:	4a92      	ldr	r2, [pc, #584]	@ (8001084 <HAL_GPIO_Init+0x298>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d052      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e40:	4a90      	ldr	r2, [pc, #576]	@ (8001084 <HAL_GPIO_Init+0x298>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d869      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e46:	4a90      	ldr	r2, [pc, #576]	@ (8001088 <HAL_GPIO_Init+0x29c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d04c      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e4c:	4a8e      	ldr	r2, [pc, #568]	@ (8001088 <HAL_GPIO_Init+0x29c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d863      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e52:	4a8e      	ldr	r2, [pc, #568]	@ (800108c <HAL_GPIO_Init+0x2a0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d046      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e58:	4a8c      	ldr	r2, [pc, #560]	@ (800108c <HAL_GPIO_Init+0x2a0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d85d      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d82a      	bhi.n	8000eb8 <HAL_GPIO_Init+0xcc>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d859      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <HAL_GPIO_Init+0x80>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ec1 	.word	0x08000ec1
 8000e74:	08000ed3 	.word	0x08000ed3
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f1b 	.word	0x08000f1b
 8000e80:	08000f1b 	.word	0x08000f1b
 8000e84:	08000f1b 	.word	0x08000f1b
 8000e88:	08000f1b 	.word	0x08000f1b
 8000e8c:	08000f1b 	.word	0x08000f1b
 8000e90:	08000f1b 	.word	0x08000f1b
 8000e94:	08000f1b 	.word	0x08000f1b
 8000e98:	08000f1b 	.word	0x08000f1b
 8000e9c:	08000f1b 	.word	0x08000f1b
 8000ea0:	08000f1b 	.word	0x08000f1b
 8000ea4:	08000f1b 	.word	0x08000f1b
 8000ea8:	08000f1b 	.word	0x08000f1b
 8000eac:	08000f1b 	.word	0x08000f1b
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	4a75      	ldr	r2, [pc, #468]	@ (8001090 <HAL_GPIO_Init+0x2a4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ebe:	e02c      	b.n	8000f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e029      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e024      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e01f      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e01a      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e013      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000efc:	2308      	movs	r3, #8
 8000efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	611a      	str	r2, [r3, #16]
          break;
 8000f06:	e009      	b.n	8000f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	615a      	str	r2, [r3, #20]
          break;
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          break;
 8000f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	@ 0xff
 8000f20:	d801      	bhi.n	8000f26 <HAL_GPIO_Init+0x13a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_Init+0x13e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2bff      	cmp	r3, #255	@ 0xff
 8000f30:	d802      	bhi.n	8000f38 <HAL_GPIO_Init+0x14c>
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x152>
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	3b08      	subs	r3, #8
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	210f      	movs	r1, #15
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	401a      	ands	r2, r3
 8000f50:	6a39      	ldr	r1, [r7, #32]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80c1 	beq.w	80010ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6c:	4b49      	ldr	r3, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x2a8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a48      	ldr	r2, [pc, #288]	@ (8001094 <HAL_GPIO_Init+0x2a8>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b46      	ldr	r3, [pc, #280]	@ (8001094 <HAL_GPIO_Init+0x2a8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f84:	4a44      	ldr	r2, [pc, #272]	@ (8001098 <HAL_GPIO_Init+0x2ac>)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <HAL_GPIO_Init+0x2b0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d01f      	beq.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80010a0 <HAL_GPIO_Init+0x2b4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d019      	beq.n	8000fec <HAL_GPIO_Init+0x200>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3a      	ldr	r2, [pc, #232]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d013      	beq.n	8000fe8 <HAL_GPIO_Init+0x1fc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a39      	ldr	r2, [pc, #228]	@ (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_GPIO_Init+0x1f8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a38      	ldr	r2, [pc, #224]	@ (80010ac <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x1f4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a37      	ldr	r2, [pc, #220]	@ (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	e00a      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fdc:	2306      	movs	r3, #6
 8000fde:	e008      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001002:	4925      	ldr	r1, [pc, #148]	@ (8001098 <HAL_GPIO_Init+0x2ac>)
 8001004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	4924      	ldr	r1, [pc, #144]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102a:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4920      	ldr	r1, [pc, #128]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8001034:	4013      	ands	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	491a      	ldr	r1, [pc, #104]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4916      	ldr	r1, [pc, #88]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 800105c:	4013      	ands	r3, r2
 800105e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d025      	beq.n	80010b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4910      	ldr	r1, [pc, #64]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e025      	b.n	80010c6 <HAL_GPIO_Init+0x2da>
 800107a:	bf00      	nop
 800107c:	10320000 	.word	0x10320000
 8001080:	10310000 	.word	0x10310000
 8001084:	10220000 	.word	0x10220000
 8001088:	10210000 	.word	0x10210000
 800108c:	10120000 	.word	0x10120000
 8001090:	10110000 	.word	0x10110000
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40011400 	.word	0x40011400
 80010ac:	40011800 	.word	0x40011800
 80010b0:	40011c00 	.word	0x40011c00
 80010b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4913      	ldr	r1, [pc, #76]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	490e      	ldr	r1, [pc, #56]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	@ (8001110 <HAL_GPIO_Init+0x324>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae7e 	bne.w	8000e00 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	@ 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e272      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8087 	beq.w	8001242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001134:	4b92      	ldr	r3, [pc, #584]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b04      	cmp	r3, #4
 800113e:	d00c      	beq.n	800115a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001140:	4b8f      	ldr	r3, [pc, #572]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d112      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
 800114c:	4b8c      	ldr	r3, [pc, #560]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b89      	ldr	r3, [pc, #548]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d06c      	beq.n	8001240 <HAL_RCC_OscConfig+0x12c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d168      	bne.n	8001240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e24c      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x76>
 800117c:	4b80      	ldr	r3, [pc, #512]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a7f      	ldr	r2, [pc, #508]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e02e      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b7b      	ldr	r3, [pc, #492]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7a      	ldr	r2, [pc, #488]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b78      	ldr	r3, [pc, #480]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a77      	ldr	r2, [pc, #476]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0xbc>
 80011b6:	4b72      	ldr	r3, [pc, #456]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a71      	ldr	r2, [pc, #452]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 80011d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b68      	ldr	r3, [pc, #416]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a67      	ldr	r2, [pc, #412]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d013      	beq.n	8001218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fcea 	bl	8000bc8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fce6 	bl	8000bc8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	@ 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e200      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b5d      	ldr	r3, [pc, #372]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe4>
 8001216:	e014      	b.n	8001242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fcd6 	bl	8000bc8 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fcd2 	bl	8000bc8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	@ 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1ec      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x10c>
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d063      	beq.n	8001316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800124e:	4b4c      	ldr	r3, [pc, #304]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800125a:	4b49      	ldr	r3, [pc, #292]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d11c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x18c>
 8001266:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d116      	bne.n	80012a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	4b43      	ldr	r3, [pc, #268]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x176>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e1c0      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4939      	ldr	r1, [pc, #228]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	e03a      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fc8b 	bl	8000bc8 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc87 	bl	8000bc8 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1a1      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4927      	ldr	r1, [pc, #156]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <HAL_RCC_OscConfig+0x270>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc6a 	bl	8000bc8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc66 	bl	8000bc8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e180      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d03a      	beq.n	8001398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d019      	beq.n	800135e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_RCC_OscConfig+0x274>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fc4a 	bl	8000bc8 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fc46 	bl	8000bc8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e160      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_RCC_OscConfig+0x26c>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f000 fa9c 	bl	8001894 <RCC_Delay>
 800135c:	e01c      	b.n	8001398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_RCC_OscConfig+0x274>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fc30 	bl	8000bc8 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136a:	e00f      	b.n	800138c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fc2c 	bl	8000bc8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d908      	bls.n	800138c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e146      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	42420000 	.word	0x42420000
 8001388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b92      	ldr	r3, [pc, #584]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e9      	bne.n	800136c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a6 	beq.w	80014f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013aa:	4b8b      	ldr	r3, [pc, #556]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b88      	ldr	r3, [pc, #544]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a87      	ldr	r2, [pc, #540]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b85      	ldr	r3, [pc, #532]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ce:	2301      	movs	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	4b82      	ldr	r3, [pc, #520]	@ (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d118      	bne.n	8001410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013de:	4b7f      	ldr	r3, [pc, #508]	@ (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7e      	ldr	r2, [pc, #504]	@ (80015dc <HAL_RCC_OscConfig+0x4c8>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fbed 	bl	8000bc8 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f2:	f7ff fbe9 	bl	8000bc8 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b64      	cmp	r3, #100	@ 0x64
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e103      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	4b75      	ldr	r3, [pc, #468]	@ (80015dc <HAL_RCC_OscConfig+0x4c8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x312>
 8001418:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a6e      	ldr	r2, [pc, #440]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e02d      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x334>
 800142e:	4b6a      	ldr	r3, [pc, #424]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a69      	ldr	r2, [pc, #420]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b67      	ldr	r3, [pc, #412]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a66      	ldr	r2, [pc, #408]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
 8001446:	e01c      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d10c      	bne.n	800146a <HAL_RCC_OscConfig+0x356>
 8001450:	4b61      	ldr	r3, [pc, #388]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a60      	ldr	r2, [pc, #384]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	4b5e      	ldr	r3, [pc, #376]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a5d      	ldr	r2, [pc, #372]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	e00b      	b.n	8001482 <HAL_RCC_OscConfig+0x36e>
 800146a:	4b5b      	ldr	r3, [pc, #364]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4a5a      	ldr	r2, [pc, #360]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6213      	str	r3, [r2, #32]
 8001476:	4b58      	ldr	r3, [pc, #352]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a57      	ldr	r2, [pc, #348]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d015      	beq.n	80014b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb9d 	bl	8000bc8 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb99 	bl	8000bc8 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0b1      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	4b4b      	ldr	r3, [pc, #300]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ee      	beq.n	8001492 <HAL_RCC_OscConfig+0x37e>
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb87 	bl	8000bc8 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fb83 	bl	8000bc8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e09b      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ee      	bne.n	80014be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d105      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a3b      	ldr	r2, [pc, #236]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8087 	beq.w	800160a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fc:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	d061      	beq.n	80015cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d146      	bne.n	800159e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb57 	bl	8000bc8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fb53 	bl	8000bc8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e06d      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001544:	d108      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4921      	ldr	r1, [pc, #132]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001558:	4b1f      	ldr	r3, [pc, #124]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a19      	ldr	r1, [r3, #32]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	430b      	orrs	r3, r1
 800156a:	491b      	ldr	r1, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb27 	bl	8000bc8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb23 	bl	8000bc8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e03d      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x46a>
 800159c:	e035      	b.n	800160a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_RCC_OscConfig+0x4cc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb10 	bl	8000bc8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fb0c 	bl	8000bc8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e026      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x498>
 80015ca:	e01e      	b.n	800160a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e019      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40007000 	.word	0x40007000
 80015e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_RCC_OscConfig+0x500>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0d0      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b6a      	ldr	r3, [pc, #424]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d910      	bls.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4965      	ldr	r1, [pc, #404]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0b8      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4b59      	ldr	r3, [pc, #356]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a58      	ldr	r2, [pc, #352]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800167e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800168c:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001698:	4b50      	ldr	r3, [pc, #320]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	494d      	ldr	r1, [pc, #308]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07f      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e073      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4936      	ldr	r1, [pc, #216]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001708:	f7ff fa5e 	bl	8000bc8 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff fa5a 	bl	8000bc8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e053      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d210      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 0207 	bic.w	r2, r3, #7
 800174e:	4922      	ldr	r1, [pc, #136]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e032      	b.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4916      	ldr	r1, [pc, #88]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490e      	ldr	r1, [pc, #56]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a6:	f000 f821 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <HAL_RCC_ClockConfig+0x1cc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_ClockConfig+0x1d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9bc 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	080026a8 	.word	0x080026a8
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001806:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x94>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b04      	cmp	r3, #4
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x30>
 8001816:	2b08      	cmp	r3, #8
 8001818:	d003      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x36>
 800181a:	e027      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800181e:	613b      	str	r3, [r7, #16]
      break;
 8001820:	e027      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	0c9b      	lsrs	r3, r3, #18
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d010      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x94>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0c5b      	lsrs	r3, r3, #17
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	4a11      	ldr	r2, [pc, #68]	@ (800188c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800184e:	fb03 f202 	mul.w	r2, r3, r2
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e004      	b.n	8001866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	613b      	str	r3, [r7, #16]
      break;
 800186a:	e002      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_RCC_GetSysClockFreq+0x98>)
 800186e:	613b      	str	r3, [r7, #16]
      break;
 8001870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001872:	693b      	ldr	r3, [r7, #16]
}
 8001874:	4618      	mov	r0, r3
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	007a1200 	.word	0x007a1200
 8001888:	080026b8 	.word	0x080026b8
 800188c:	080026c8 	.word	0x080026c8
 8001890:	003d0900 	.word	0x003d0900

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e041      	b.n	8001966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff f89c 	bl	8000a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 fb3a 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e041      	b.n	8001a04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f839 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f000 faeb 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_TIM_PWM_Start+0x24>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e022      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d109      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x3e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e015      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d109      	bne.n	8001a78 <HAL_TIM_PWM_Start+0x58>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e008      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e072      	b.n	8001b78 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x82>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001aa0:	e013      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0x92>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ab0:	e00b      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xa2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ac0:	e003      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fd20 	bl	8002518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	@ (8001b80 <HAL_TIM_PWM_Start+0x160>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d004      	beq.n	8001aec <HAL_TIM_PWM_Start+0xcc>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <HAL_TIM_PWM_Start+0x164>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_TIM_PWM_Start+0xd0>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_TIM_PWM_Start+0xd2>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b80 <HAL_TIM_PWM_Start+0x160>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d018      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x122>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_TIM_PWM_Start+0x164>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x122>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b22:	d00e      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x122>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_TIM_PWM_Start+0x168>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x122>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_TIM_PWM_Start+0x16c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d004      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x122>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_TIM_PWM_Start+0x170>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d111      	bne.n	8001b66 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d010      	beq.n	8001b76 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b64:	e007      	b.n	8001b76 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40013400 	.word	0x40013400
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800
 8001b90:	40000c00 	.word	0x40000c00

08001b94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fcb6 	bl	8002518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <HAL_TIM_PWM_Stop+0xd8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_PWM_Stop+0x2c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2d      	ldr	r2, [pc, #180]	@ (8001c70 <HAL_TIM_PWM_Stop+0xdc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_TIM_PWM_Stop+0x30>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_TIM_PWM_Stop+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d017      	beq.n	8001bfa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_TIM_PWM_Stop+0x66>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	f240 4344 	movw	r3, #1092	@ 0x444
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_TIM_PWM_Stop+0x66>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6a1a      	ldr	r2, [r3, #32]
 8001c00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_TIM_PWM_Stop+0x96>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	f240 4344 	movw	r3, #1092	@ 0x444
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_TIM_PWM_Stop+0x96>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <HAL_TIM_PWM_Stop+0xa6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c38:	e013      	b.n	8001c62 <HAL_TIM_PWM_Stop+0xce>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d104      	bne.n	8001c4a <HAL_TIM_PWM_Stop+0xb6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c48:	e00b      	b.n	8001c62 <HAL_TIM_PWM_Stop+0xce>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PWM_Stop+0xc6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c58:	e003      	b.n	8001c62 <HAL_TIM_PWM_Stop+0xce>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	40013400 	.word	0x40013400

08001c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0ae      	b.n	8001df0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	f200 809f 	bhi.w	8001de0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cdd 	.word	0x08001cdd
 8001cac:	08001de1 	.word	0x08001de1
 8001cb0:	08001de1 	.word	0x08001de1
 8001cb4:	08001de1 	.word	0x08001de1
 8001cb8:	08001d1d 	.word	0x08001d1d
 8001cbc:	08001de1 	.word	0x08001de1
 8001cc0:	08001de1 	.word	0x08001de1
 8001cc4:	08001de1 	.word	0x08001de1
 8001cc8:	08001d5f 	.word	0x08001d5f
 8001ccc:	08001de1 	.word	0x08001de1
 8001cd0:	08001de1 	.word	0x08001de1
 8001cd4:	08001de1 	.word	0x08001de1
 8001cd8:	08001d9f 	.word	0x08001d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f9d6 	bl	8002094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6999      	ldr	r1, [r3, #24]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	619a      	str	r2, [r3, #24]
      break;
 8001d1a:	e064      	b.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fa26 	bl	8002174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6999      	ldr	r1, [r3, #24]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	021a      	lsls	r2, r3, #8
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	619a      	str	r2, [r3, #24]
      break;
 8001d5c:	e043      	b.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fa79 	bl	800225c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0208 	orr.w	r2, r2, #8
 8001d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0204 	bic.w	r2, r2, #4
 8001d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69d9      	ldr	r1, [r3, #28]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	61da      	str	r2, [r3, #28]
      break;
 8001d9c:	e023      	b.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 facd 	bl	8002344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69d9      	ldr	r1, [r3, #28]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	61da      	str	r2, [r3, #28]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	75fb      	strb	r3, [r7, #23]
      break;
 8001de4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIM_ConfigClockSource+0x1c>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0b4      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x186>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e4c:	d03e      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0xd4>
 8001e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e52:	f200 8087 	bhi.w	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e5a:	f000 8086 	beq.w	8001f6a <HAL_TIM_ConfigClockSource+0x172>
 8001e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e62:	d87f      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e64:	2b70      	cmp	r3, #112	@ 0x70
 8001e66:	d01a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0xa6>
 8001e68:	2b70      	cmp	r3, #112	@ 0x70
 8001e6a:	d87b      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e6c:	2b60      	cmp	r3, #96	@ 0x60
 8001e6e:	d050      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x11a>
 8001e70:	2b60      	cmp	r3, #96	@ 0x60
 8001e72:	d877      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e74:	2b50      	cmp	r3, #80	@ 0x50
 8001e76:	d03c      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8001e78:	2b50      	cmp	r3, #80	@ 0x50
 8001e7a:	d873      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d058      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0x13a>
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d86f      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	2b30      	cmp	r3, #48	@ 0x30
 8001e86:	d064      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	2b30      	cmp	r3, #48	@ 0x30
 8001e8a:	d86b      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d060      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d867      	bhi.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d05c      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d05a      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x15a>
 8001e9c:	e062      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eae:	f000 fb14 	bl	80024da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	609a      	str	r2, [r3, #8]
      break;
 8001eca:	e04f      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001edc:	f000 fafd 	bl	80024da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eee:	609a      	str	r2, [r3, #8]
      break;
 8001ef0:	e03c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001efe:	461a      	mov	r2, r3
 8001f00:	f000 fa74 	bl	80023ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2150      	movs	r1, #80	@ 0x50
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 facb 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f10:	e02c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f000 fa92 	bl	8002448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2160      	movs	r1, #96	@ 0x60
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fabb 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f30:	e01c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f000 fa54 	bl	80023ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2140      	movs	r1, #64	@ 0x40
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 faab 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f50:	e00c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f000 faa2 	bl	80024a6 <TIM_ITRx_SetConfig>
      break;
 8001f62:	e003      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
      break;
 8001f68:	e000      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a39      	ldr	r2, [pc, #228]	@ (8002080 <TIM_Base_SetConfig+0xf8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a38      	ldr	r2, [pc, #224]	@ (8002084 <TIM_Base_SetConfig+0xfc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00f      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fae:	d00b      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a35      	ldr	r2, [pc, #212]	@ (8002088 <TIM_Base_SetConfig+0x100>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a34      	ldr	r2, [pc, #208]	@ (800208c <TIM_Base_SetConfig+0x104>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <TIM_Base_SetConfig+0x108>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <TIM_Base_SetConfig+0xf8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <TIM_Base_SetConfig+0x82>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a27      	ldr	r2, [pc, #156]	@ (8002084 <TIM_Base_SetConfig+0xfc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <TIM_Base_SetConfig+0x82>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff0:	d00b      	beq.n	800200a <TIM_Base_SetConfig+0x82>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a24      	ldr	r2, [pc, #144]	@ (8002088 <TIM_Base_SetConfig+0x100>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <TIM_Base_SetConfig+0x82>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	@ (800208c <TIM_Base_SetConfig+0x104>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <TIM_Base_SetConfig+0x82>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <TIM_Base_SetConfig+0x108>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <TIM_Base_SetConfig+0xf8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0xc8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <TIM_Base_SetConfig+0xfc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f023 0201 	bic.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
  }
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40013400 	.word	0x40013400
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800
 8002090:	40000c00 	.word	0x40000c00

08002094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f023 0201 	bic.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f023 0302 	bic.w	r3, r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a20      	ldr	r2, [pc, #128]	@ (800216c <TIM_OC1_SetConfig+0xd8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_OC1_SetConfig+0x64>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <TIM_OC1_SetConfig+0xdc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d10c      	bne.n	8002112 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f023 0308 	bic.w	r3, r3, #8
 80020fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a15      	ldr	r2, [pc, #84]	@ (800216c <TIM_OC1_SetConfig+0xd8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d003      	beq.n	8002122 <TIM_OC1_SetConfig+0x8e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <TIM_OC1_SetConfig+0xdc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d111      	bne.n	8002146 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	621a      	str	r2, [r3, #32]
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40013400 	.word	0x40013400

08002174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f023 0210 	bic.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0320 	bic.w	r3, r3, #32
 80021be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <TIM_OC2_SetConfig+0xe0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_OC2_SetConfig+0x68>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a20      	ldr	r2, [pc, #128]	@ (8002258 <TIM_OC2_SetConfig+0xe4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10d      	bne.n	80021f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <TIM_OC2_SetConfig+0xe0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_OC2_SetConfig+0x94>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <TIM_OC2_SetConfig+0xe4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d113      	bne.n	8002230 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800220e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40013400 	.word	0x40013400

0800225c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a21      	ldr	r2, [pc, #132]	@ (800233c <TIM_OC3_SetConfig+0xe0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_OC3_SetConfig+0x66>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a20      	ldr	r2, [pc, #128]	@ (8002340 <TIM_OC3_SetConfig+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10d      	bne.n	80022de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a16      	ldr	r2, [pc, #88]	@ (800233c <TIM_OC3_SetConfig+0xe0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_OC3_SetConfig+0x92>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <TIM_OC3_SetConfig+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d113      	bne.n	8002316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	621a      	str	r2, [r3, #32]
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40013400 	.word	0x40013400

08002344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800237a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800238e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	031b      	lsls	r3, r3, #12
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <TIM_OC4_SetConfig+0xa0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_OC4_SetConfig+0x68>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a10      	ldr	r2, [pc, #64]	@ (80023e8 <TIM_OC4_SetConfig+0xa4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d109      	bne.n	80023c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40013400 	.word	0x40013400

080023ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0201 	bic.w	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 030a 	bic.w	r3, r3, #10
 8002428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	621a      	str	r2, [r3, #32]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f023 0210 	bic.w	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	031b      	lsls	r3, r3, #12
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002484:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	621a      	str	r2, [r3, #32]
}
 800249c:	bf00      	nop
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f043 0307 	orr.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4313      	orrs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	609a      	str	r2, [r3, #8]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2201      	movs	r2, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a1a      	ldr	r2, [r3, #32]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	431a      	orrs	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	621a      	str	r2, [r3, #32]
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002574:	2302      	movs	r3, #2
 8002576:	e050      	b.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ce:	d00e      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a15      	ldr	r2, [pc, #84]	@ (800262c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10c      	bne.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40013400 	.word	0x40013400
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00

08002638 <memset>:
 8002638:	4603      	mov	r3, r0
 800263a:	4402      	add	r2, r0
 800263c:	4293      	cmp	r3, r2
 800263e:	d100      	bne.n	8002642 <memset+0xa>
 8002640:	4770      	bx	lr
 8002642:	f803 1b01 	strb.w	r1, [r3], #1
 8002646:	e7f9      	b.n	800263c <memset+0x4>

08002648 <__libc_init_array>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	2600      	movs	r6, #0
 800264c:	4d0c      	ldr	r5, [pc, #48]	@ (8002680 <__libc_init_array+0x38>)
 800264e:	4c0d      	ldr	r4, [pc, #52]	@ (8002684 <__libc_init_array+0x3c>)
 8002650:	1b64      	subs	r4, r4, r5
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	42a6      	cmp	r6, r4
 8002656:	d109      	bne.n	800266c <__libc_init_array+0x24>
 8002658:	f000 f81a 	bl	8002690 <_init>
 800265c:	2600      	movs	r6, #0
 800265e:	4d0a      	ldr	r5, [pc, #40]	@ (8002688 <__libc_init_array+0x40>)
 8002660:	4c0a      	ldr	r4, [pc, #40]	@ (800268c <__libc_init_array+0x44>)
 8002662:	1b64      	subs	r4, r4, r5
 8002664:	10a4      	asrs	r4, r4, #2
 8002666:	42a6      	cmp	r6, r4
 8002668:	d105      	bne.n	8002676 <__libc_init_array+0x2e>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002670:	4798      	blx	r3
 8002672:	3601      	adds	r6, #1
 8002674:	e7ee      	b.n	8002654 <__libc_init_array+0xc>
 8002676:	f855 3b04 	ldr.w	r3, [r5], #4
 800267a:	4798      	blx	r3
 800267c:	3601      	adds	r6, #1
 800267e:	e7f2      	b.n	8002666 <__libc_init_array+0x1e>
 8002680:	080026cc 	.word	0x080026cc
 8002684:	080026cc 	.word	0x080026cc
 8002688:	080026cc 	.word	0x080026cc
 800268c:	080026d0 	.word	0x080026d0

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
